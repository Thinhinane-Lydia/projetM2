

// // import axios from "axios";

// // const API_URL = process.env.REACT_APP_API_URL || "http://localhost:8000/api";

// // // ‚úÖ R√©cup√©rer toutes les cat√©gories avec leurs sous-cat√©gories
// // export const fetchCategories = async () => {
// //   try {
// //     const response = await axios.get(`${API_URL}/categories/all`);
// //     console.log("Cat√©gories re√ßues :", response.data.categories); // Debug
// //     return response.data.categories;
// //   } catch (error) {
// //     console.error("Erreur lors de la r√©cup√©ration des cat√©gories :", error);
// //     return [];
// //   }
// // };
// // // ‚úÖ R√©cup√©rer les sous-cat√©gories d'une cat√©gorie sp√©cifique
// // export const fetchSubCategories = async (categoryId) => {
// //   try {
// //     const response = await axios.get(`${API_URL}/subcategories/${categoryId}`);
// //     console.log("‚úÖ R√©ponse API sous-cat√©gories :", response.data.subCategories); // ‚úÖ Debug
// //     return response.data.subCategories;
// //   } catch (error) {
// //     console.error("‚ùå Erreur lors de la r√©cup√©ration des sous-cat√©gories :", error);
// //     return [];
// //   }
// // };


// // // ‚úÖ R√©cup√©rer tous les produits
// // export const getAllProducts = async () => {
// //   try {
// //     const response = await axios.get(`${API_URL}/products/all`);
// //     console.log("Produits re√ßus :", response.data.products); // Debug
// //     return response.data.products;
// //   } catch (error) {
// //     console.error("Erreur lors de la r√©cup√©ration des produits :", error);
// //     return [];
// //   }
// // };

// // // ‚úÖ Ajouter un produit
// // export const addProduct = async (productData) => {
// //   try {
// //     const response = await axios.post(`${API_URL}/products/add`, productData, {
// //       headers: { "Content-Type": "application/json" },
// //     });
// //     console.log("Produit ajout√© :", response.data);
// //     return response.data;
// //   } catch (error) {
// //     console.error("Erreur lors de l'ajout du produit :", error);
// //     throw error;
// //   }
// // };

// import axios from "axios";

// const API_BASE_URL = "http://localhost:8000/api/v2";

// export const fetchCategories = async () => {
//   const response = await axios.get(`${API_BASE_URL}/categories`);
//   return response.data;
// };

// export const fetchSubCategories = async (categoryId) => {
//   const response = await axios.get(`${API_BASE_URL}/subcategories/${categoryId}`);
//   return response.data;
// };

// export const fetchProducts = async () => {
//   const response = await axios.get(`${API_BASE_URL}/products`);
//   return response.data;
// };

// export const fetchSizesBySubCategory = async (subCategoryId) => {
//   const url = `http://localhost:8000/api/v2/sizes/subcategory/${subCategoryId}`; // üî• V√©rifie cette URL dans Thunder Client !
  
//   console.log("üîç Requ√™te envoy√©e √† :", url); // ‚úÖ V√©rifie l'URL exacte avant de l'envoyer

//   try {
//     const response = await fetch(url);

//     if (!response.ok) {
//       throw new Error(`Erreur API: ${response.status} ${response.statusText}`); // ‚úÖ Voir s'il y a une erreur 404 ou 500
//     }

//     const data = await response.json();
//     console.log("‚úÖ R√©ponse JSON re√ßue :", data); // ‚úÖ V√©rifie que la r√©ponse est bien du JSON
//     return data;
//   } catch (error) {
//     console.error("üö® Erreur API fetchSizesBySubCategory :", error);
//     return { sizes: [] }; // ‚úÖ √âvite les crashs en retournant un tableau vide
//   }
// };
import axios from "axios";

const API_BASE_URL = "http://localhost:8000/api/v2";

export const fetchCategories = async () => {
  const response = await axios.get(`${API_BASE_URL}/categories`);
  return response.data;
};

export const fetchSubCategories = async (categoryId) => {
  const response = await axios.get(`${API_BASE_URL}/subcategories/${categoryId}`);
  return response.data;
};

export const fetchProducts = async () => {
  const response = await axios.get(`${API_BASE_URL}/products`);
  return response.data;
};

// R√©cup√©rer les tailles par sous-cat√©gorie
export const fetchSizesBySubCategory = async (subCategoryId) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/sizes/subcategory/${subCategoryId}`);
    return response.data;
  } catch (error) {
    console.error("Erreur API fetchSizesBySubCategory :", error);
    return { sizes: [] };
  }
};

// R√©cup√©rer les produits filtr√©s
export const fetchFilteredProducts = async (filters) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/products`, { params: filters });
    return response.data.products;
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des produits filtr√©s :", error);
    return [];
  }
};
